def expand_urls(stub, rng):
    """
    Generate list of urls over range index given a service stub.

    :param stub: Url base string for map service.
    :param rng: List of numbers generated by range() call.
    :return: List of urls beginning in stub and ending in rng values.
    """
    urls = []
    for i in rng:
        urls.append(stub + str(i))
    return urls


address_stub = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/AddressService/MapServer/"
)
address_range = range(0, 3)
ADDRESS_URLS = expand_urls(address_stub, address_range)

appraisal_stub = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/Appraisal/MapServer/"
)
appraisal_range = range(1, 9)
APPRAISAL_URLS = expand_urls(appraisal_stub, appraisal_range)

# benton 2014
BC_IMAGERY_2014_URL = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/Benton_2014/MapServer/0"
)

boundary_stub = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/Boundaries/MapServer/"
)
boundary_range = range(0, 8)
BOUNDARY_URLS = expand_urls(boundary_stub, boundary_range)

eam_stub = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/EAM_Service/MapServer/"
)
eam_rng = range(0, 9)
EAM_URLS = expand_urls(eam_stub, eam_rng)

eh_stub = "https://gis.co.benton.or.us/arcgis/rest/services/Public/EHMap/MapServer/"
eh_range = range(0, 7)
EH_URLS = expand_urls(eh_stub, eh_range)

hazard_stub = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/HazardService/MapServer/"
)
hazard_range = range(0, 2)
HAZARD_URLS = expand_urls(hazard_stub, hazard_range)

natural_stub = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/NaturalService/MapServer/"
)
natural_range = range(0, 6)
NATURAL_URLS = expand_urls(natural_stub, natural_range)

PUBLIC_LANDS_URL = "https://gis.co.benton.or.us/arcgis/rest/services/Public/PublicLandsService/MapServer/0"

PUBLIC_WATER_SYSTEM_URL = "https://gis.co.benton.or.us/arcgis/rest/services/Public/PublicWaterSystemService/MapServer/0"

elect_2021_stub = "https://gis.co.benton.or.us/arcgis/rest/services/Public/Redistricting2021/MapServer/"
elect_2021_rng = [0, 20, 21]
elect_districts_rng = range(1, 19)
ELECTION_URLS = expand_urls(elect_2021_stub, elect_2021_rng)
ELECTION_DISTRICTS_URLS = expand_urls(elect_2021_stub, elect_districts_rng)

ROADS_BC_URL = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/Roads_BC/MapServer/0"
)

SLOPE_LIDAR_URL = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/SlopeService/MapServer/0"
)

survey_stub = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/SurveyService/MapServer/"
)
survey_range = range(0, 9)
SURVEY_URLS = expand_urls(survey_stub, survey_range)

TAXLOT_OWNERS_URL = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/TaxlotOwners/MapServer/0"
)

taxlot_stub = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/TaxlotService/MapServer/"
)
anno_0020_rng = range(1, 38)
anno_0050_rng = range(39, 76)
anno_0100_rng = range(77, 114)
anno_0200_rng = range(115, 150)
anno_0400_rng = range(151, 186)
taxlot_rng = range(186, 199)
ANNO_0020_URLS = expand_urls(taxlot_stub, anno_0020_rng)
ANNO_0050_URLS = expand_urls(taxlot_stub, anno_0050_rng)
ANNO_0100_URLS = expand_urls(taxlot_stub, anno_0100_rng)
ANNO_0200_URLS = expand_urls(taxlot_stub, anno_0200_rng)
ANNO_0400_URLS = expand_urls(taxlot_stub, anno_0400_rng)
TAXLOT_URLS = expand_urls(taxlot_stub, taxlot_rng)

TAX_CODE_AREAS_URL = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/TCAService/MapServer/0"
)

topo_stub = "https://gis.co.benton.or.us/arcgis/rest/services/Public/TopoServiceContours20ft/MapServer/"
topo_range = range(0, 4)
TOPO_CONTOURS_URLS = expand_urls(topo_stub, topo_range)

transport_stub = "https://gis.co.benton.or.us/arcgis/rest/services/Public/TransportationService/MapServer/"
transport_range = range(0, 5)
TRANSPORT_URLS = expand_urls(transport_stub, transport_range)

compliance_stub = "https://gis.co.benton.or.us/arcgis/rest/services/Public/ZoningCompliance/MapServer/"
compliance_range = [0, 1, range(8, 16)]
COMPLIANCE_URLS = expand_urls(compliance_stub, compliance_range)
butterfly_range = range(3, 8)
COMPLIANCE_BUTTERFLY_URLS = expand_urls(compliance_stub, butterfly_range)

zoning_stub = (
    "https://gis.co.benton.or.us/arcgis/rest/services/Public/ZoningService/MapServer/"
)
# zoning_range = range(0, 7)
zoning_range = range(6, -1, -1)
ZONING_URLS = expand_urls(zoning_stub, zoning_range)

ZONING_URLS_DRAFT = []
ZONING_URLS_DRAFT.append(
    "https://services5.arcgis.com/U7TbEknoCzTtNGz4/arcgis/rest/services/zoning_service_test/FeatureServer/4"
)
ZONING_URLS_DRAFT.append(ZONING_URLS[1])
ZONING_URLS_DRAFT.append(ZONING_URLS[2])
ZONING_URLS_DRAFT.append(ZONING_URLS[3])
ZONING_URLS_DRAFT.append(ZONING_URLS[5])
ZONING_URLS_DRAFT.append(
    "https://services5.arcgis.com/U7TbEknoCzTtNGz4/arcgis/rest/services/zoning_service_test/FeatureServer/2"
)
ZONING_URLS_DRAFT.append(
    "https://services5.arcgis.com/U7TbEknoCzTtNGz4/arcgis/rest/services/zoning_service_test/FeatureServer/0"
)

# web hosted county layers

NFI_HPSV = "35ce1b83017b4b4591fec665d7213499"
NFI_HPSV_TILES = "1ecbb53e004a4e82a3be15900e906d59"
NFI_HPSV_TILES_URL = "https://vectortileservices5.arcgis.com/U7TbEknoCzTtNGz4/arcgis/rest/services/tiles_nfi_incentive_vegetation/VectorTileServer/"
hpsv_stub = "https://services5.arcgis.com/U7TbEknoCzTtNGz4/arcgis/rest/services/tiles_nfi_incentive_vegetation/FeatureServer/"
hpsv_range = range(8, -1, -1)
NFI_HPSV_URLS = expand_urls(hpsv_stub, hpsv_range)

ppsv_range = range(15, 8, -1)
NFI_PPSV_URLS = expand_urls(hpsv_stub, ppsv_range)

# Outside Resources
# FEMA hazards

fema_nfhl_stub = (
    "https://hazards.fema.gov/gis/nfhl/rest/services/public/NFHL/MapServer/"
)
fema_nfhl_rng = range(1, 32)
fema_nfhlwms_stub = (
    "https://hazards.fema.gov/gis/nfhl/rest/services/public/NFHLWMS/MapServer/"
)
fema_nfhlwms_rng = range(1, 33)
FEMA_NFHL_URLS = expand_urls(fema_nfhl_stub, fema_nfhl_rng)
FEMA_NFHLWMS_URLS = expand_urls(fema_nfhlwms_stub, fema_nfhlwms_rng)

# Corvallis Address MapService
CORVALLIS_ADDRESS_URL = "https://gis.corvallisoregon.gov/pub2/rest/services/Base/CorvallisAddress/MapServer/0"

# aerial imagery
# esri
ESRI_IMAGERY_30CM = (
    "https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/3"
)
